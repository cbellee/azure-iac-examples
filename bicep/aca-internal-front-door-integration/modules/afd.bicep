param prefix string
param secretName string = 'star-bellee-net'
param location string = resourceGroup().location
param keyVaultResourceGroupName string

@allowed([
  'Detection'
  'Prevention'
])
param wafMode string = 'Prevention'
param dnsZoneName string
param keyVaultName string
param externalDomainResourceGroupName string = 'external-dns-zones-rg'
param publicDomainName string = 'bellee.net'
param subDomainName string

var suffix = uniqueString(resourceGroup().id)
var afdName = '${prefix}-afd-${suffix}'
var workspaceName = '${prefix}-wks-${suffix}'
var afdEndpointName = '${prefix}-afd-ep-${suffix}'
var wafPolicyName = '${prefix}wafpolicy${suffix}'
var skuName = 'Premium_AzureFrontDoor'
var customDomainResourceName = '${prefix}-custom-domain-${suffix}'
var wafManagedRuleSets = [
  {
    ruleSetType: 'Microsoft_DefaultRuleSet'
    ruleSetVersion: '1.1'
  }
  {
    ruleSetType: 'Microsoft_BotManagerRuleSet'
    ruleSetVersion: '1.0'
  }
]

var logCategories = [
  'FrontDoorAccessLog'
  'FrontDoorHealthProbeLog'
  'FrontDoorWebApplicationFirewallLog'
]

var metricCategories = [
  'AllMetrics'
]

var logs = [for category in logCategories: {
  category: category
  enabled: true
}]

var metrics = [for category in metricCategories: {
  category: category
  enabled: true
}]

resource dnsZone 'Microsoft.Network/dnsZones@2023-07-01-preview' existing = {
  name: dnsZoneName
  scope: resourceGroup(externalDomainResourceGroupName)
}

resource frontDoor 'Microsoft.Cdn/profiles@2023-07-01-preview' = {
  name: afdName
  location: 'Global'
  identity: {
    type: 'SystemAssigned'
  }
  sku: {
    name: 'Premium_AzureFrontDoor'
  }
  properties: {
    originResponseTimeoutSeconds: 30
  }
}

resource keyVault 'Microsoft.KeyVault/vaults@2023-07-01' existing = {
  name: keyVaultName
  scope: resourceGroup(externalDomainResourceGroupName)
}

resource wks 'Microsoft.OperationalInsights/workspaces@2022-10-01' = {
  name: workspaceName
  location: location
  properties: {
    retentionInDays: 30
    sku: {
      name: 'PerGB2018'
    }
  }
}

module keyVaultRbac 'keyvaultRbac.bicep' = {
  name: 'module-keyvault-rbac'
  scope: resourceGroup(keyVaultResourceGroupName)
  params: {
    keyVaultName: keyVault.name
    principalId: frontDoor.identity.principalId
  }
}

resource wildcardCertificate 'Microsoft.Cdn/profiles/secrets@2022-11-01-preview' = {
  parent: frontDoor
  name: 'star-bellee-net'
  properties: {
    parameters: {
      type: 'CustomerCertificate'
      secretSource: {
        id: resourceId('Microsoft.KeyVault/vaults/secrets', keyVault.name, secretName)
      }
      useLatestVersion: true
      subjectAlternativeNames: [
        '*.${publicDomainName}'
        '*.internal.${publicDomainName}'
      ]
    }
  }
  dependsOn: [
    keyVaultRbac
  ]
}

resource customDomain 'Microsoft.Cdn/profiles/customdomains@2022-11-01-preview' = {
  parent: frontDoor
  name: customDomainResourceName
  properties: {
    hostName: '${subDomainName}.${publicDomainName}'
    tlsSettings: {
      certificateType: 'CustomerCertificate'
      minimumTlsVersion: 'TLS12'
      secret: {
        id: wildcardCertificate.id
      }
    }
    azureDnsZone: {
      id: dnsZone.id
    }
  }
  dependsOn: [
    keyVaultRbac
  ]
}

resource afdEndpoint 'Microsoft.Cdn/profiles/afdEndpoints@2023-07-01-preview' = {
  parent: frontDoor
  name: afdEndpointName
  location: 'Global'
  properties: {
    autoGeneratedDomainNameLabelScope: 'TenantReuse'
    enabledState: 'Enabled'
  }
}

resource wafPolicy 'Microsoft.Network/FrontDoorWebApplicationFirewallPolicies@2022-05-01' = {
  name: wafPolicyName
  location: 'global'
  sku: {
    name: skuName
  }
  properties: {
    policySettings: {
      enabledState: 'Enabled'
      mode: wafMode
    }
    managedRules: {
      managedRuleSets: wafManagedRuleSets
    }
  }
}

resource afdSecurityPolicy 'Microsoft.Cdn/profiles/securityPolicies@2023-07-01-preview' = {
  parent: frontDoor
  name: '${prefix}-default-security-policy'
  properties: {
    parameters: {
      wafPolicy: {
        id: wafPolicy.id
      }
      associations: [
        {
          domains: [
            {
              id: afdEndpoint.id
            }
          ]
          patternsToMatch: [
            '/*'
          ]
        }
      ]
      type: 'WebApplicationFirewall'
    }
  }
}



// Diagnostics Settings
resource diagnosticSettings 'Microsoft.Insights/diagnosticSettings@2021-05-01-preview' = {
  name: 'afd-diag-settings'
  scope: frontDoor
  properties: {
    workspaceId: wks.id
    logs: logs
    metrics: metrics
  }
}

output fqdn string = afdEndpoint.properties.hostName
output endpointId string = afdEndpoint.id
output endpointName string = afdEndpoint.name
output name string = frontDoor.name
output customDomainResourceName string = customDomain.name
